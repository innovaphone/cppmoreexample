<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>innovaphone SDK - jwk.h</title>
    <!-- Take care to adjust the 3 paths if needed, e. g.: "../../web1/doc" if the file is in the common/interface folder -->
    <link rel="stylesheet" href="../../web1/doc/innovaphone.doc.css" type="text/css" />
    <link rel="stylesheet" href="../../web1/doc/vs.css">
</head>

<body>
    <script src="../../web1/doc/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>

    <h1>JWK Library</h1>
    <p>
        A JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key pair or individual public/private keys. The exact structure of JWK-JSON-objects is specified in RFC-7517.
    </p>
    <p>
        JWKs are heavily used in a lot of web-based protocols such as Automatic Certificate Management Environment (ACME) or JSON Web Tokens (JWT).
    </p>

    <h1>File information</h1>
    <table style="margin-left:-12px">
        <tr><td><b>File</b></td><td>common/ilib/jwk.h<br><br></td></tr>
        <tr><td><b><a href="#Overview">Overview</a></b></td></tr>
        <tr>
            <td><b><a href="#Classes">Classes</a></b></td>
            <td>
                <a href="#jwk">jwk</a><br>
            </td>
        </tr>
        <tr>
            <td><b>Defines</b></td>
            <td>
                <a href="#JSON_ID_ROOT">JSON_ID_ROOT</a><br>
                <a href="#JSON_ID_NONE">JSON_ID_NONE</a><br>
                <br>
            </td>
        </tr>
        <tr>
            <td><b>Examples</b></td>
            <td>
                <a href="#Example_Encoding">Encoding</a><br>
                <a href="#Example_Decoding">Decoding</a><br>
                <br>
            </td>
        </tr>
    </table>

    <h1 id="Overview">Overview</h1>
    <p>
        The jwk class can be used for encoding and decoding public/private keys to/from JSON messages in JWK format. A JWK typically looks like this:
        <pre><code class="JS">{
    "kty": "EC,"
    "crv": "P-256,"
    "x":   "f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU,"
    "y":   "x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0,"
    "d":   "jpsQnnGQmL-YBIffH1136cspYG6-0iY7X1fCE9-E9LI,"
    "alg": "ES256"
}
</code></pre>
        In this case the P256 elliptic curve is used and 'd' is the private key, 'x' and 'y' compose the public key. The 'alg' attribute specifies the used algorithm and is optional.
    </p>
    <p>
        Decoding is usually done like that:
<pre><code class="JS">// JWK encoded in JSON string
char msg[1000] = "&#60;Insert JSON object from above&#62;";

// Decode JWK object from JSON string
jwk keys;
keys.decode(msg);

// No we can access the elements
auto kty = keys.kty;
auto crv = keys.crv;
auto d   = keys.params.p256.d;
</code></pre>
    </p>
    <p>
        There are different ways to encode public/private keys to JWK-JSON-objects.
        <pre><code class="JS">// Encode JWK to string
keys.encode(msg);               // Encode public and private key
keys.encode_public_key(msg);    // Encode public key only
keys.encode_private_key(msg);   // Encode private key only
</code></pre>
    </p>
    For better integration with innovaphone's <a href="json.htm">json_io</a> library, there are also additional overloads for the encode/decode methods. This way JWKs can not only be (de-)serialized from strings, but also from/to <a href="json.htm">json_io</a> objects.
    <p>
        <pre><code class="JS">// Append JWK to existing json structure
json_io json(msg);
word json_parent_elem = json.get_object();
keys.encode(&json, json_parent_elem, "jwk");
keys.encode_public_key(&json, json_parent_elem, "jwk-pub");
keys.encode_private_key(&json, json_parent_elem, "jwk-priv");
json.encode();
</code></pre>
    </p>
    <p>
        JWK objects can be used to sign/verify messages.
        <pre><code class="JS">// Sign message
const char* msg2 = "Hello World";
char* signature = (char*)alloca(keys.getSignatureSize()));
keys.sign(signature, msg2, strlen(msg2));                   // Requires private key to be set

// Verify message
bool valid = keys.verify(signature, msg2, strlen(msg2));    // Requires public key to be set
</code></pre>
    </p>

    <p>
        Additionally we can generate "random" key pairs
        <pre><code class="JS">keys.gen_es256_keys(); // Initializes JWK object 'keys' with a set of ES256 public/private keys.
</code></pre>
    </p>

    <h1 id="Classes">Classes</h1>

    <h3>Public functions</h3>

    <p>TODO</p>

    <h1>Data types</h1>

    <p>TODO</p>
</body>
</html>
